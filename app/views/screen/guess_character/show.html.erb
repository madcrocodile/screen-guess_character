<div class="flex w-full h-full justify-center" id="<%= screen.class.name %>" data-payload="<%= screen.payload.to_json %>"></div>

<style>
  @keyframes appearance {
    0% {
      opacity: 0;
      transform: scale(0.3);
    }
    50% {
        opacity: 80;
        transform: scale(1.1);
    }
    100% {
      transform: scale(1);
      opacity: 1;
    }
  }

  /*todo: delete after making changes to Screen::Base*/
  .container, .min-h-screen {
      height: 100%;
  }

  .bg-green-500 {
      height: 50px;
  }
</style>

<script type="text/babel">
  const guessCharacter = document.getElementById("Screen::GuessCharacter")
  const { payload } = guessCharacter.dataset
  const { characters, color } = JSON.parse(payload)

  const GuessCharacter = ({ onResponse, talkUrl, solutionPath }) => {
    const [isTalking, setIsTalking] = React.useState(true)

    React.useEffect(() => {
      const talk = new Audio(talkUrl)
      talk.play()
      talk.addEventListener('ended', () => setIsTalking(false))
    }, [])

      return (
        <div className="w-full h-full bg-gradient-to-t from-[#8dbc4b] to-lime-200 rounded-3xl flex justify-center items-center p-4">
          <div className="grid grid-cols-5 gap-2 w-full place-items-center auto-rows-min">
            {[...Array(25)].map((item, index) => {
              characters.forEach(({value, position}) => {
                const [column, row] = position
                  const cell = row * 5 + column
                if (index == cell) {
                    item = value;
                }
                console.log(item)
              })
              return (
                !item
                  ? <div className="invisible w-full aspect-square"></div>
                  : <button
                      key={index}
                      className={`
                        w-full
                        button-character
                        aspect-square
                        text-4xl sm:text-6xl md:text-7xl
                        font-bold text-center
                        rounded-xl
                        hover:shadow-[2px_2px_0_0_rgba(255,129,47,1)]
                        active:shadow-none
                        transition-all duration-100 ease-in-out
                        transform
                        opacity-0
                        animate-[appearance_1.2s_ease-in-out_forwards]
                        select-none
                        ${isTalking
                          ? `pointer-events-none text-[#6e7b80] border-2 border-[#c1c6c9] bg-[#d6dce0] shadow-[0_4px_0_-1px_rgba(193,198,201,1),inset_0_8px_3px_-8px_rgba(255,255,255,1)]`
                          : `cursor-pointer text-[${color}] border-4 border-[#eaad2b] bg-[#ffbb29] hover:bg-[#ffc829] shadow-[0_4px_0_0_rgba(255,129,47,1),inset_0_12px_3px_-8px_rgba(255,255,255,0.5)]`
                        }
                      `}
                      onClick={() => {
                        setTimeout(() => {
                          onResponse()
                          window.location.href = `${solutionPath}?answer=${item}`
                        }, 500)
                      }}
                    >
                      {item}
                    </button>
                )
            })}
          </div>
        </div>
      )
  }

  ReactDOM.render(
    <React.StrictMode>
      <Runner component={GuessCharacter} />
    </React.StrictMode>,
    guessCharacter
  )
</script>
